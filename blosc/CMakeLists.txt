# a simple way to detect that we are using CMAKE
add_definitions(-DUSING_CMAKE)

# library sources
set(SOURCES blosc.c blosclz.c shuffle.c)
# library install directory
set(lib_dir lib${LIB_SUFFIX})
set(version_string
    ${BLOSC_VERSION_MAJOR}.${BLOSC_VERSION_MINOR}.${BLOSC_VERSION_PATCH})

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
if(WIN32)
    # try to use the system library
    find_package(Threads)
    if(NOT Threads_FOUND)
        message(STATUS "using the internal pthread library for win32 systems.")
        set(SOURCES ${SOURCES} win32/pthread.c)
    else(NOT Threads_FOUND)
        set(LIBS ${LIBS} ${CMAKE_THREAD_LIBS_INIT})
    endif(NOT Threads_FOUND)
else(WIN32)
    find_package(Threads REQUIRED)
    set(LIBS ${LIBS} ${CMAKE_THREAD_LIBS_INIT})
endif(WIN32)

set(INTERNAL_LIBS ${CMAKE_SOURCE_DIR}/internal-complibs)

# compressors
if (ENABLE_LZ4 OR ENABLE_LZ4HC)
    if (LZ4_FOUND)
        include_directories( ${LZ4_INCLUDE_DIR} )
        set(LIBS ${LIBS} ${LZ4_LIBRARY})
    else(LZ4_FOUND)
        set(LZ4_LOCAL_DIR ${INTERNAL_LIBS}/lz4-r110)
        include_directories( ${LZ4_LOCAL_DIR} )
        if (ENABLE_LZ4)
            set(SOURCES ${SOURCES} ${LZ4_LOCAL_DIR}/lz4.c)
        endif (ENABLE_LZ4)
        if (ENABLE_LZ4HC)
            set(SOURCES ${SOURCES} ${LZ4_LOCAL_DIR}/lz4hc.c)
        endif (ENABLE_LZ4HC)
    endif(LZ4_FOUND)
endif (ENABLE_LZ4 OR ENABLE_LZ4HC)

if (ENABLE_SNAPPY)
    if (SNAPPY_FOUND)
        include_directories( ${SNAPPY_INCLUDE_DIR} )
        set(LIBS ${LIBS} ${SNAPPY_LIBRARY})
    else(SNAPPY_FOUND)
        set(SNAPPY_LOCAL_DIR ${INTERNAL_LIBS}/snappy-1.1.1)
        include_directories( ${SNAPPY_LOCAL_DIR} )
        set(SOURCES ${SOURCES}
            ${SNAPPY_LOCAL_DIR}/snappy.cc
            ${SNAPPY_LOCAL_DIR}/snappy-c.cc
            ${SNAPPY_LOCAL_DIR}/snappy-sinksource.cc
            ${SNAPPY_LOCAL_DIR}/snappy-stubs-internal.cc
            )
    endif(SNAPPY_FOUND)
endif (ENABLE_SNAPPY)

if (ENABLE_ZLIB)
    if (ZLIB_FOUND)
        include_directories( ${ZLIB_INCLUDE_DIR} )
        set(LIBS ${LIBS} ${ZLIB_LIBRARY})
    else(ZLIB_FOUND)
        set(ZLIB_LOCAL_DIR ${INTERNAL_LIBS}/zlib-1.2.8)
        include_directories( ${ZLIB_LOCAL_DIR} )
        set(SOURCES ${SOURCES}
            ${ZLIB_LOCAL_DIR}/adler32.c
            ${ZLIB_LOCAL_DIR}/compress.c
            ${ZLIB_LOCAL_DIR}/crc32.c
            ${ZLIB_LOCAL_DIR}/deflate.c
            ${ZLIB_LOCAL_DIR}/gzclose.c
            ${ZLIB_LOCAL_DIR}/gzlib.c
            ${ZLIB_LOCAL_DIR}/gzread.c
            ${ZLIB_LOCAL_DIR}/gzwrite.c
            ${ZLIB_LOCAL_DIR}/infback.c
            ${ZLIB_LOCAL_DIR}/inffast.c
            ${ZLIB_LOCAL_DIR}/inflate.c
            ${ZLIB_LOCAL_DIR}/inftrees.c
            ${ZLIB_LOCAL_DIR}/trees.c
            ${ZLIB_LOCAL_DIR}/uncompr.c
            ${ZLIB_LOCAL_DIR}/zutil.c
        )
    endif(ZLIB_FOUND)
endif (ENABLE_ZLIB)


# targets
add_library(blosc_shared SHARED ${SOURCES})
set_target_properties(blosc_shared PROPERTIES OUTPUT_NAME blosc)
set_target_properties(blosc_shared PROPERTIES
    VERSION ${version_string}
    SOVERSION ${version_string}
)
target_link_libraries(blosc_shared ${LIBS})

if(BUILD_STATIC)
    add_library(blosc_static STATIC ${SOURCES})
    set_target_properties(blosc_static PROPERTIES OUTPUT_NAME blosc)
    target_link_libraries(blosc_static ${LIBS})
endif(BUILD_STATIC)


# install
install(FILES blosc.h DESTINATION include COMPONENT DEV)
install(TARGETS blosc_shared DESTINATION ${lib_dir} COMPONENT LIB)
if(BUILD_STATIC)
    install(TARGETS blosc_static DESTINATION ${lib_dir} COMPONENT DEV)
endif(BUILD_STATIC)
